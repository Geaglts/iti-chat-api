scalar JSON

# Types
type User {
  id: ID!
  name: String!
  email: String!
  phone: String!
  active: Boolean!
  token: String!
  contacts: [Contact]
  messages: [Message]
}

type Message {
  id: ID!
  message: String!
  time: String!
  date: String!
  from: User
  to: User
}

type Contact {
  id: ID!
  alias: String!
  status: Int!
  phone: String!
  user: User
  lastMessage: String
}

# Inputs
input NewUserInput {
  name: String
  email: String!
  phone: String!
  password: String!
  contacts: [ContactInput]
}

input UpdateUserInput {
  name: String!
}

input EnviarMensageInput {
  message: String!
  from: ID!
  to: ID!
}

input UpdateContactsInput {
  userId: ID!
  contacts: [ContactInput]
}

input ContactInput {
  alias: String!
  phone: String!
}

# Query
type Query {
  _: Boolean
  info: JSON
  # Trae la información de un usuario
  me: User
  # Trae a todos los usuarios
  users: [User]
  # Trae los mensajes de un usuario con otro
  getMessages(contactId: ID!): [Message]
}

# Mutation
type Mutation {
  # Envía un mensaje a otro usuario
  sendMessage(input: EnviarMensageInput!): JSON
  # Crea a un nuevo usuario
  createUser(input: NewUserInput!): User!
  # Actualiza los datos de un usuario
  updateUser(input: UpdateUserInput!): User!
  updateContacts(input: UpdateContactsInput!): Boolean!
  # Revisa si el usuario tiene una cuenta
  newSession(user: String!, password: String!): JSON
}

# Subscriptions
type Subscription {
  nuevoMensaje(usuario_id: ID!): Message
}
